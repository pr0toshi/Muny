{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "fed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Disbursal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DividendClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        }
      ],
      "name": "Memo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fedad",
          "type": "address"
        }
      ],
      "name": "NewFed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasuryad",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prop",
          "type": "uint256"
        }
      ],
      "name": "Newproposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prop",
          "type": "uint256"
        }
      ],
      "name": "Proposalexecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        }
      ],
      "name": "DividendsOwedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "owed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_disburse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountt",
          "type": "uint256"
        }
      ],
      "name": "burnfed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountt",
          "type": "uint256"
        }
      ],
      "name": "burnt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "canceled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        }
      ],
      "name": "claimDividendsOwedUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "executed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "executeproposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fedDAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fvote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fvoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fvotedaddrs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inflate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDisbursalIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockxp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintam",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fnd",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "fam",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockmn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockxp_",
          "type": "uint256"
        }
      ],
      "name": "newproposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "packedDisbursals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pfee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setNewTDao",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fed",
          "type": "address"
        }
      ],
      "name": "setNewfedDao",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDisbursals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokens",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "memo",
          "type": "string[]"
        }
      ],
      "name": "transferx",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tvote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tvoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tvotedaddrs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fed",
          "type": "address"
        }
      ],
      "name": "updatefedVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "updatetreasuryVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x8740d0EF44FFd926302E36CfAf7A38e61dAD550e",
    "contractAddress": "0x90D465839eD680Ab21b759B82ceb2794DA04AACb",
    "transactionIndex": 9,
    "gasUsed": "2596501",
    "logsBloom": "0x
    "blockHash": "0xc70a64851168c06eac0387ed0995d70a24f2e9507f0dab6a17dabb9e72215f77",
    "transactionHash": "0xfc8d2dad97a2469279b0146a5d826128619410cc7b15806be6aaab8291633192",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 7390174,
        "transactionHash": "0xfc8d2dad97a2469279b0146a5d826128619410cc7b15806be6aaab8291633192",
        "address": "0x90D465839eD680Ab21b759B82ceb2794DA04AACb",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009d31e30003f253563ff108bc60b16fdf2c93abb5"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000038d7ea4c68000",
        "logIndex": 30,
        "blockHash": "0xc70a64851168c06eac0387ed0995d70a24f2e9507f0dab6a17dabb9e72215f77"
      }
    ],
    "blockNumber": 7390174,
    "cumulativeGasUsed": "4005973",
    "status": 1,
    "byzantium": true
  },
  "address": "0x90D465839eD680Ab21b759B82ceb2794DA04AACb",
  "args": [
    "Muny",
    "MUNY",
    "0x9d31e30003f253563ff108bc60b16fdf2c93abb5",
    "0x9d31e30003f253563ff108bc60b16fdf2c93abb5"
  ],
  "solcInputHash": "0x599cbe9a1bde55ac0ffb5a45bbeb5b23f1ae088ed81419096d120aaccd6c2822",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"fed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Disbursal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"Memo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fedad\",\"type\":\"address\"}],\"name\":\"NewFed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryad\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prop\",\"type\":\"uint256\"}],\"name\":\"Newproposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prop\",\"type\":\"uint256\"}],\"name\":\"Proposalexecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"DividendsOwedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_disburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountt\",\"type\":\"uint256\"}],\"name\":\"burnfed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountt\",\"type\":\"uint256\"}],\"name\":\"burnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"claimDividendsOwedUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"executeproposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fedDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fvote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fvoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fvotedaddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inflate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDisbursalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockxp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnd\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fam\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockmn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockxp_\",\"type\":\"uint256\"}],\"name\":\"newproposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packedDisbursals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pfee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setNewTDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fed\",\"type\":\"address\"}],\"name\":\"setNewfedDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDisbursals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"memo\",\"type\":\"string[]\"}],\"name\":\"transferx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvotedaddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fed\",\"type\":\"address\"}],\"name\":\"updatefedVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"updatetreasuryVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. * This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. * TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. * We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. * Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. * Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burnfed(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply.     * Emits a {Transfer} event with `to` set to the zero address.     * Requirements:     * - `account` cannot be the zero address. - `account` must have at least `amount` tokens.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 8.     * To select a different value for {decimals}, use {_setupDecimals}.     * All three of these values are immutable: they can only be set once during construction.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"newproposal(uint256,uint16,uint256,uint256,uint256)\":{\"details\":\"Moves tokens `amount` from `sender` to `recipient`.     * This is internal function is equivalent to {transfer}, and can be used to e.g. implement automatic token fees, slashing mechanisms, etc.     * Emits a {Transfer} event.     * Requirements:     * - `sender` cannot be the zero address. - `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}.     * Requirements:     * - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"updatefedVote(address)\":{\"details\":\"Update votes. Votedad voted address by sender. Votet treasury address votes.     Voted sender vote amount.\"},\"updatetreasuryVote(address)\":{\"details\":\"Update votes. Votedad voted address by sender. Votet treasury address votes.     Voted sender vote amount.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Muny.sol\":\"Muny\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"contracts/Muny.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract Muny is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    \\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    mapping(address => uint256) public _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint16 public fee;\\n    uint256 public burnedSupply;\\n    address public treasuryDao;\\n    address public fedDAO;\\n\\n    mapping(address => uint256) public tvote;\\n    mapping(address => address) public tvotedaddrs;\\n    mapping(address => uint256) public tvoted;\\n\\n    mapping(address => uint256) public fvote;\\n    mapping(address => address) public fvotedaddrs;\\n    mapping(address => uint256) public fvoted;\\n\\n    uint256 public prop;\\n    uint256 public tlock;\\n    uint256 public lockxp;\\n    mapping(uint256 => address) public proposer;\\n    mapping(uint256 => uint256) public lock;\\n    mapping(uint256 => uint256) public mintam;\\n    mapping(uint256 => uint16) public pfee;\\n    mapping(uint256 => uint256) public inflate;\\n    mapping(uint256 => uint256) public lockmin;\\n    mapping(uint256 => uint256) public lockx;\\n    mapping(uint256 => bool) public canceled;\\n    mapping(uint256 => bool) public executed;\\n\\n    event NewTreasury(address indexed treasuryad);\\n    event NewFed(address indexed fedad);\\n    event Newproposal(uint256 indexed prop);\\n    event Proposalexecuted(uint256 indexed prop);\\n    event DividendClaim(address indexed owner, uint256 amount);\\n    event Disbursal(uint256 amount);\\n    event Memo(address indexed from, address indexed to, uint256 indexed value, string memo);\\n    \\n    \\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 8.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address fed,\\n        address treasury\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 8;\\n        treasuryDao = treasury;\\n        fedDAO = fed;\\n        _totalSupply = 1000000000000000; // 10**7*10e8\\n        _balances[treasury] = 1000000000000000;\\n        emit Transfer(address(0), treasury, 1000000000000000);\\n        tlock = 15 minutes;\\n        fee = 500;\\n    }\\n\\n    /* Dividends */\\n\\n    uint256 internal constant _pointMultiplier = 1e8;\\n    uint256 public totalDisbursals;\\n    mapping(uint256 => uint256) public packedDisbursals;\\n    mapping(address => uint256) public lastDisbursalIndex;\\n    \\n    function readPoints(\\n      uint256 packedPoints,\\n      uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 points)\\n    {\\n        assembly {\\n            points := shl(mul(index, 64), packedPoints)\\n            points := shr(192, points)\\n        }\\n    }\\n\\n    function writePoints(\\n        uint256 packedPoints,\\n        uint256 index,\\n        uint256 newPoints\\n    )\\n        internal\\n        pure\\n        returns (uint256 points)\\n    {\\n        assembly {\\n            points := shl(mul(sub(3, index), 64), newPoints)\\n            points := or(packedPoints, points)\\n        }\\n    }\\n\\n    function _disburse(uint256 amount) public {\\n        uint256 newDividendPoints = amount.mul(_pointMultiplier).div(_totalSupply.sub(burnedSupply));\\n        require(newDividendPoints < uint64(-1), \\\"Error: Disbursal points do not fit in a uint64.\\\");\\n        uint256 total = totalDisbursals;\\n        uint256 packedIndex = total / 4;\\n        uint256 relIndex = total % 4;\\n        if (relIndex == 3) {\\n          packedIndex += 1;\\n          relIndex = 0;\\n        }\\n        uint256 packedPoints = packedDisbursals[packedIndex];\\n        packedDisbursals[packedIndex] = writePoints(packedPoints, relIndex, newDividendPoints);\\n        totalDisbursals = total + 1;\\n        _mint(amount);\\n        emit Disbursal(amount);\\n    }\\n\\n    function _updateDividends(address account) internal {\\n        claimDividendsOwedUntil(account, totalDisbursals);\\n    }\\n\\n    modifier updatesDividends(address account) {\\n        claimDividendsOwedUntil(account, totalDisbursals);\\n        _;\\n    }\\n    \\n    function claimDividendsOwedUntil(address account, uint256 until) public {\\n        uint256 last = lastDisbursalIndex[account];\\n        if (until == last) return;\\n        require(until > last, \\\"Dividends already claimed.\\\");\\n        require(until <= totalDisbursals, \\\"Can not claim dividends that have not been disbursed.\\\");\\n        uint256 packedIndexStop = until / 4;\\n        uint256 relIndexStop = until % 4;\\n        uint256 packedIndexNext = last / 4;\\n        uint256 relIndexNext = packedIndexNext % 4;\\n        uint256 balance = _balances[account];\\n        uint256 packedPoints = packedDisbursals[packedIndexNext];\\n        while (packedIndexNext < packedIndexStop) {\\n            for (; relIndexNext < 4; relIndexNext++) {\\n                balance = (balance * readPoints(packedPoints, relIndexNext)) / _pointMultiplier;\\n            }\\n            relIndexNext = 0;\\n            packedPoints = packedDisbursals[++packedIndexNext];\\n        }\\n        while (relIndexNext < relIndexStop) {\\n            balance = (balance * readPoints(packedPoints, relIndexNext++)) / _pointMultiplier;\\n        }\\n        _balances[account] = balance;\\n        lastDisbursalIndex[account] = until;\\n    }\\n\\n    function DividendsOwedUntil(address account, uint256 until) public view returns (uint256 owed) {\\n        uint256 last = lastDisbursalIndex[account];\\n        if (until == last) return 0;\\n        require(until > last, \\\"Dividends already claimed.\\\");\\n        require(until <= totalDisbursals, \\\"Can not claim dividends that have not been disbursed.\\\");\\n        uint256 packedIndexStop = until / 4;\\n        uint256 relIndexStop = until % 4;\\n        uint256 packedIndexNext = last / 4;\\n        uint256 relIndexNext = packedIndexNext % 4;\\n        uint256 balance = _balances[account];\\n        owed = balance;\\n        uint256 packedPoints = packedDisbursals[packedIndexNext];\\n        while (packedIndexNext < packedIndexStop) {\\n            for (; relIndexNext < 4; relIndexNext++) {\\n                owed = (owed * readPoints(packedPoints, relIndexNext)) / _pointMultiplier;\\n            }\\n            relIndexNext = 0;\\n            packedPoints = packedDisbursals[++packedIndexNext];\\n        }\\n        while (relIndexNext < relIndexStop) {\\n            owed = (owed * readPoints(packedPoints, relIndexNext++)) / _pointMultiplier;\\n        }\\n        return owed.sub(balance);\\n    }\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account].mul(_totalSupply).div(_totalSupply.sub(burnedSupply));\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        virtual\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) updatesDividends(sender) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n\\n    function newproposal(\\n        uint256 fnd,\\n        uint16 fam,\\n        uint256 mint,\\n        uint256 lockmn,\\n        uint256 lockxp_\\n    ) public {\\n        prop += 1;\\n        uint256 proposal = prop;\\n        proposer[proposal] = msg.sender;\\n        lock[proposal] = now + tlock;\\n        pfee[proposal] = fam;\\n        mintam[proposal] = fnd;\\n        inflate[proposal] = mint;\\n        lockmin[proposal] = lockmn;\\n        lockx[proposal] = lockxp_;\\n        emit Newproposal(proposal);\\n    }\\n\\n    function executeproposal(uint256 proposal) updatesDividends(treasuryDao) public  {\\n        require(\\n            now >= lock[proposal] && lock[proposal] + lockxp >= now\\n        );\\n        require(executed[proposal] == false);\\n        require(msg.sender == fedDAO);\\n        require(msg.sender == proposer[proposal]);\\n\\n        if (mintam[proposal] != 0) {\\n            _mint(mintam[proposal]);\\n            _balances[treasuryDao] = _balances[treasuryDao].add(\\n                mintam[proposal]\\n            );\\n        }\\n\\n        if (pfee[proposal] != 9999 && 2500 >= pfee[proposal]) {\\n            fee = pfee[proposal];\\n        }\\n\\n        if (inflate[proposal] != 0) {\\n            _disburse(inflate[proposal]);\\n        }\\n\\n        if (lockmin[proposal] != 0) {\\n            require(lockmin[proposal] >= 3 days);\\n            tlock = lockmin[proposal];\\n        }\\n        if (lockx[proposal] != 0) {\\n            lockxp = lockx[proposal];\\n        }\\n\\n        executed[proposal] = true;\\n        emit Proposalexecuted(proposal);\\n    }\\n\\n    function setNewTDao(address treasury) public returns (bool) {\\n        require(\\n            tvote[treasury] > uint256((_totalSupply * 51) / 100),\\n            \\\"Sprout: setNewTDao requires majority approval\\\"\\n        );\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Sprout: setNewTDao requires non contract\\\"\\n        );\\n        treasuryDao = treasury;\\n        emit NewTreasury(treasury);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update votes. Votedad voted address by sender. Votet treasury address votes.\\n     *      Voted sender vote amount.\\n     */\\n    function updatetreasuryVote(address treasury) updatesDividends(msg.sender) public returns (bool) {\\n        tvote[tvotedaddrs[msg.sender]] -= tvoted[msg.sender];\\n        tvote[treasury] += uint256(balanceOf(msg.sender));\\n        tvotedaddrs[msg.sender] = treasury;\\n        tvoted[msg.sender] = uint256(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function setNewfedDao(address fed) public returns (bool) {\\n        require(\\n            fvote[fed] > uint256((_totalSupply * 51) / 100),\\n            \\\"setNewfedDao requires majority approval\\\"\\n        );\\n        require(msg.sender == tx.origin, \\\"setNewfedDao requires non contract\\\");\\n        fedDAO = fed;\\n        emit NewFed(fed);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update votes. Votedad voted address by sender. Votet treasury address votes.\\n     *      Voted sender vote amount.\\n     */\\n    function updatefedVote(address fed) updatesDividends(msg.sender) public returns (bool) {\\n        fvote[fvotedaddrs[msg.sender]] -= fvoted[msg.sender];\\n        fvote[fed] += uint256(balanceOf(msg.sender));\\n        fvotedaddrs[msg.sender] = fed;\\n        fvoted[msg.sender] = uint256(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function _abVal(uint256 amt) internal view returns (uint256) {\\n      return amt.mul(_totalSupply.sub(burnedSupply)).div(_totalSupply);\\n    }\\n\\n    function _updateVotes(address sender, uint256 amountt) internal {\\n        if (fvoted[sender] > 0) {\\n            address votedAddr = fvotedaddrs[sender];\\n            if (fvoted[sender] > amountt) {\\n                fvote[votedAddr] = fvote[votedAddr] - amountt;\\n                fvoted[sender] = fvoted[sender] - amountt;\\n            } else {\\n                fvote[votedAddr] -= fvoted[sender];\\n                fvoted[sender] = 0;\\n            }\\n        }\\n\\n        if (tvoted[sender] > 0) {\\n            if (tvoted[sender] > amountt) {\\n                tvote[tvotedaddrs[sender]] =\\n                    tvote[tvotedaddrs[sender]] -\\n                    amountt;\\n                tvoted[sender] = tvoted[sender] - amountt;\\n            } else {\\n                tvote[tvotedaddrs[sender]] -= tvoted[sender];\\n                tvoted[sender] = 0;\\n            }\\n        }\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amountt\\n    )\\n        internal\\n    {\\n        _updateDividends(sender);\\n        _updateDividends(recipient);\\n        _updateDividends(treasuryDao);\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint256 amount = _abVal(amountt);\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(\\n            uint256((amount * (99500 - fee)) / 100000)\\n        );\\n\\n        _updateVotes(sender, amountt);\\n\\n        _balances[treasuryDao] = _balances[treasuryDao].add(\\n            uint256((amount * fee) / 100000)\\n        );\\n        _burn(uint256(amount / 200));\\n        emit Transfer(sender, recipient, amountt);\\n    }\\n\\n    function transferx(\\n        address[] memory to,\\n        uint256[] memory tokens,\\n        string[] memory memo\\n    ) public returns (bool success) {\\n        require(to.length == tokens.length && tokens.length == memo.length);\\n        for (uint256 i = 0; i < to.length; i++) {\\n            require(transfer(to[i], tokens[i]));\\n            emit Memo(msg.sender, to[i], tokens[i], memo[i]);\\n        }\\n        return true;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(uint256 amount) internal virtual {\\n        require(msg.sender == fedDAO, \\\"not fedDAO\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burnfed(address target, uint256 amountt)\\n        public\\n        returns (bool success)\\n    {\\n        _updateDividends(target);\\n        _updateDividends(treasuryDao);\\n        address sender = target;\\n        uint256 amount;\\n        require(msg.sender == fedDAO, \\\"transfer from nonfed address\\\");\\n        amount = uint256(\\n            (amountt * (_totalSupply - burnedSupply)) / _totalSupply\\n        );\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        if (fvoted[sender] > 0) {\\n            if (fvoted[sender] > amountt) {\\n                fvote[fvotedaddrs[sender]] =\\n                    fvote[fvotedaddrs[sender]] -\\n                    amountt;\\n                fvoted[sender] = fvoted[sender] - amountt;\\n            } else {\\n                fvote[fvotedaddrs[sender]] -= fvoted[sender];\\n                fvoted[sender] = 0;\\n            }\\n        }\\n\\n        if (tvoted[sender] > 0) {\\n            if (tvoted[sender] > amountt) {\\n                tvote[tvotedaddrs[sender]] =\\n                    tvote[tvotedaddrs[sender]] -\\n                    amountt;\\n                tvoted[sender] = tvoted[sender] - amountt;\\n            } else {\\n                tvote[tvotedaddrs[sender]] -= tvoted[sender];\\n                tvoted[sender] = 0;\\n            }\\n        }\\n\\n        _balances[treasuryDao] = _balances[treasuryDao].add(\\n            uint256((amount * fee) / 100000)\\n        );\\n        _burn(uint256((amount * (99500 - fee)) / 100000));\\n        _burn(uint256(amount / 200));\\n        emit Transfer(sender, address(0), amount);\\n        return true;\\n    }\\n\\n    function _burn(uint256 amount) internal {\\n        burnedSupply = burnedSupply + amount;\\n    }\\n\\n    function burnt(uint256 amountt)\\n        public\\n        updatesDividends(msg.sender) updatesDividends(treasuryDao)\\n        returns (bool success)\\n    {\\n        address sender = msg.sender;\\n        uint256 amount;\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        amount = uint256(\\n            (amountt * (_totalSupply - burnedSupply)) / _totalSupply\\n        );\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        if (fvoted[sender] > 0) {\\n            if (fvoted[sender] > amountt) {\\n                fvote[fvotedaddrs[sender]] =\\n                    fvote[fvotedaddrs[sender]] -\\n                    amountt;\\n                fvoted[sender] = fvoted[sender] - amountt;\\n            } else {\\n                fvote[fvotedaddrs[sender]] -= fvoted[sender];\\n                fvoted[sender] = 0;\\n            }\\n        }\\n\\n        if (tvoted[sender] > 0) {\\n            if (tvoted[sender] > amountt) {\\n                tvote[tvotedaddrs[sender]] =\\n                    tvote[tvotedaddrs[sender]] -\\n                    amountt;\\n                tvoted[sender] = tvoted[sender] - amountt;\\n            } else {\\n                tvote[tvotedaddrs[sender]] -= tvoted[sender];\\n                tvoted[sender] = 0;\\n            }\\n        }\\n\\n        _balances[treasuryDao] = _balances[treasuryDao].add(\\n            uint256((amount * fee) / 100000)\\n        );\\n        _burn(uint256((amount * (99500 - fee)) / 100000));\\n        _burn(uint256(amount / 200));\\n        emit Transfer(sender, address(0), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual updatesDividends(owner) updatesDividends(spender) {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xfdd6202938e3b561979bf2391b9f1fb76fcac56180559f5440ad187cf4b2669b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d7938038062002d7983398101604081905262000034916200027b565b83516200004990600190602087019062000111565b5082516200005f90600290602086019062000111565b506003805460ff1916600890811790915580546001600160a01b038084166001600160a01b03199283168117909355600980549186169190921617905566038d7ea4c680006000818155828152600460205260408082208390555190917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91620000ea919062000309565b60405180910390a3505061038460115550506006805461ffff19166101f417905562000312565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015457805160ff191683800117855562000184565b8280016001018555821562000184579182015b828111156200018457825182559160200191906001019062000167565b506200019292915062000196565b5090565b620001b391905b808211156200019257600081556001016200019d565b90565b80516001600160a01b0381168114620001ce57600080fd5b92915050565b600082601f830112620001e5578081fd5b81516001600160401b0380821115620001fc578283fd5b6040516020601f8401601f19168201810183811183821017156200021e578586fd5b806040525081945083825286818588010111156200023b57600080fd5b600092505b838310156200025f578583018101518284018201529182019162000240565b83831115620002715760008185840101525b5050505092915050565b6000806000806080858703121562000291578384fd5b84516001600160401b0380821115620002a8578586fd5b620002b688838901620001d4565b95506020870151915080821115620002cc578485fd5b50620002db87828801620001d4565b935050620002ed8660408701620001b6565b9150620002fe8660608701620001b6565b905092959194509250565b90815260200190565b612a5780620003226000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063897615e611610182578063d098948c116100e9578063dd467064116100a2578063e24bea031161007c578063e24bea0314610602578063f4289aba1461060a578063fd53585d14610612578063ff77bccb14610625576102bb565b8063dd467064146105d4578063dd62ed3e146105e7578063ddca3f43146105fa576102bb565b8063d098948c1461056d578063d37118d714610580578063d3ecebd714610588578063d5a40fd51461059b578063d5cdac51146105ae578063d7324077146105c1576102bb565b8063a60573701161013b578063a6057370146104fb578063a9059cbb1461050e578063a9ed12b114610521578063abfbc06b14610534578063ae17060e14610547578063c61f1e4b1461055a576102bb565b8063897615e61461049f5780638d7e22e2146104b25780638e089173146104c557806395d89b41146104d857806396a5dd6a146104e0578063a457c2d7146104e8576102bb565b806339509351116102265780636c7bd1d7116101df5780636c7bd1d71461042d5780636e393ac2146104405780636ebcf6071461045357806370a082311461046657806378db0c1414610479578063874282631461048c576102bb565b806339509351146103cf57806343d37cb0146103e25780634479700a146103ea5780634d9c6e27146103f257806355d0a1d0146104125780635a0b2c151461041a576102bb565b806323b872dd1161027857806323b872dd1461034c578063265cf3e21461035f578063306c67111461037457806330b49d2f14610387578063313ce567146103a7578063346b1d17146103bc576102bb565b806306f92426146102c057806306fdde03146102e957806308cd2369146102fe578063095ea7b31461031157806318160ddd14610331578063193192f214610339575b600080fd5b6102d36102ce36600461247b565b610638565b6040516102e0919061293b565b60405180910390f35b6102f161064a565b6040516102e091906124ff565b6102d361030c3660046122dd565b6106df565b61032461031f36600461236c565b6106f1565b6040516102e091906124f4565b6102d361070f565b61032461034736600461236c565b610715565b61032461035a36600461232c565b610a3a565b61037261036d366004612493565b610ad5565b005b6103246103823660046122dd565b610b80565b61039a6103953660046122dd565b610c38565b6040516102e091906124e0565b6103af610c53565b6040516102e09190612944565b6103726103ca36600461247b565b610c5c565b6103246103dd36600461236c565b610d54565b6102d3610da8565b6102d3610dae565b61040561040036600461247b565b610db4565b6040516102e0919061292c565b6102d3610dca565b61039a6104283660046122dd565b610dd0565b61037261043b36600461247b565b610deb565b6102d361044e36600461247b565b611056565b6102d36104613660046122dd565b611068565b6102d36104743660046122dd565b61107a565b61032461048736600461247b565b6110c0565b6102d361049a36600461247b565b6110d5565b61039a6104ad36600461247b565b6110e7565b6103246104c03660046122dd565b611102565b6103246104d336600461247b565b6111b2565b6102f16114a5565b61039a611503565b6103246104f636600461236c565b611512565b610324610509366004612396565b611580565b61032461051c36600461236c565b61166f565b6102d361052f36600461236c565b611683565b6102d361054236600461247b565b6117d2565b6103246105553660046122dd565b6117e4565b6102d36105683660046122dd565b611894565b6102d361057b3660046122dd565b6118a6565b6102d36118b8565b61032461059636600461247b565b6118be565b6103246105a93660046122dd565b6118d3565b6102d36105bc36600461247b565b61198b565b6102d36105cf3660046122dd565b61199d565b6102d36105e236600461247b565b6119af565b6102d36105f53660046122f8565b6119c1565b6104056119ec565b6102d36119f6565b61039a6119fc565b61037261062036600461236c565b611a0b565b6102d36106333660046122dd565b611b65565b60156020526000908152604090205481565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d55780601f106106aa576101008083540402835291602001916106d5565b820191906000526020600020905b8154815290600101906020018083116106b857829003601f168201915b5050505050905090565b600c6020526000908152604090205481565b60006107056106fe611b77565b8484611b7b565b5060015b92915050565b60005490565b600061072083611c4b565b600854610735906001600160a01b0316611c4b565b60095483906000906001600160a01b0316331461076d5760405162461bcd60e51b8152600401610764906126a4565b60405180910390fd5b600054600754810385028161077e57fe5b0490506107c4816040518060600160405280602681526020016129af602691396001600160a01b038516600090815260046020526040902054919063ffffffff611c5a16565b6001600160a01b038316600090815260046020908152604080832093909355600f9052205415610897576001600160a01b0382166000908152600f6020526040902054841015610853576001600160a01b038083166000818152600e60209081526040808320549094168252600d815283822080548990039055918152600f9091522080548590039055610897565b6001600160a01b038083166000818152600f602081815260408084208054600e8452828620549097168552600d835290842080549690960390955592825290915290555b6001600160a01b0382166000908152600c60205260409020541561095e576001600160a01b0382166000908152600c602052604090205484101561091a576001600160a01b038083166000818152600b60209081526040808320549094168252600a815283822080548990039055918152600c909152208054859003905561095e565b6001600160a01b038083166000818152600c602081815260408084208054600b8452828620549097168552600a835290842080549690960390955592825290915290555b60065461099a90620186a09061ffff1683025b6008546001600160a01b031660009081526004602052604090205491900463ffffffff611c8616565b6008546001600160a01b03166000908152600460205260409020556006546109d890620186a09061ffff16620184ac0362ffffff1683025b04611cb2565b6109e360c8826109d2565b60006001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a27919061293b565b60405180910390a3506001949350505050565b600083610a4981601c54611a0b565b610a54858585611cbd565b610aca85610a60611b77565b610ac5866040518060600160405280602881526020016129d5602891396001600160a01b038b16600090815260056020526040812090610a9e611b77565b6001600160a01b03168152602081019190915260400160002054919063ffffffff611c5a16565b611b7b565b506001949350505050565b6010805460010190819055600081815260136020908152604080832080546001600160a01b031916331790556011546014835281842042909101905560168252808320805461ffff8a1661ffff1990911617905560158252808320899055601782528083208790556018825280832086905560199091528082208490555182917fc9953cb0a36aafd57ba1d0521aec9bdb4c87749a4130234f1ec367535441399491a2505050505050565b6000606460005460330281610b9157fe5b6001600160a01b0384166000908152600d602052604090205491900410610bca5760405162461bcd60e51b815260040161076490612595565b333214610be95760405162461bcd60e51b8152600401610764906127a8565b600980546001600160a01b0319166001600160a01b0384169081179091556040517f643c9b43c7ed05e8c7689242644be54618a6067fc15e66a30505b648f69cef6b90600090a2506001919050565b600b602052600090815260409020546001600160a01b031681565b60035460ff1690565b6000610c98610c78600754600054611e8d90919063ffffffff16565b610c8c846305f5e10063ffffffff611ecf16565b9063ffffffff611f0916565b905067ffffffffffffffff8110610cc15760405162461bcd60e51b81526004016107649061261e565b601c5460048104600380831690811415610cdc575060010160005b6000828152601d6020526040902054610cf6818387611f4b565b6000848152601d602052604090205560018401601c55610d1586611f59565b7f4b8c67e7613d36e16f35d53233370f831f317c4a5f5a51a13ad81e4f93343d6e86604051610d44919061293b565b60405180910390a1505050505050565b6000610705610d61611b77565b84610ac58560056000610d72611b77565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff611c8616565b60115481565b601c5481565b60166020526000908152604090205461ffff1681565b60075481565b600e602052600090815260409020546001600160a01b031681565b600854601c546001600160a01b0390911690610e08908290611a0b565b6000828152601460205260409020544210801590610e39575060125460008381526014602052604090205442910110155b610e4257600080fd5b6000828152601b602052604090205460ff1615610e5e57600080fd5b6009546001600160a01b03163314610e7557600080fd5b6000828152601360205260409020546001600160a01b03163314610e9857600080fd5b60008281526015602052604090205415610f1857600082815260156020526040902054610ec490611f59565b6000828152601560209081526040808320546008546001600160a01b03168452600490925290912054610efc9163ffffffff611c8616565b6008546001600160a01b03166000908152600460205260409020555b60008281526016602052604090205461ffff1661270f14801590610f50575060008281526016602052604090205461ffff166109c410155b15610f7a576000828152601660205260409020546006805461ffff191661ffff9092169190911790555b60008281526017602052604090205415610fa657600082815260176020526040902054610fa690610c5c565b60008281526018602052604090205415610feb576000828152601860205260409020546203f4801115610fd857600080fd5b6000828152601860205260409020546011555b60008281526019602052604090205415611012576000828152601960205260409020546012555b6000828152601b6020526040808220805460ff191660011790555183917f25e590a02eeb0e1d9aada3d581d18076f2ce6ba24263d46b11f96c76e06974e891a25050565b60186020526000908152604090205481565b60046020526000908152604090205481565b6000610709611096600754600054611e8d90919063ffffffff16565b600080546001600160a01b03861682526004602052604090912054610c8c9163ffffffff611ecf16565b601a6020526000908152604090205460ff1681565b60176020526000908152604090205481565b6013602052600090815260409020546001600160a01b031681565b60003361111181601c54611a0b565b336000818152600c6020908152604080832054600b8352818420546001600160a01b03168452600a90925290912080549190910390556111509061107a565b6001600160a01b0384166000818152600a60209081526040808320805490950190945533808352600b90915292902080546001600160a01b03191690911790556111999061107a565b336000908152600c602052604090205550600192915050565b6000336111c181601c54611a0b565b600854601c546001600160a01b03909116906111de908290611a0b565b336000816111fe5760405162461bcd60e51b8152600401610764906127ea565b600054600754810387028161120f57fe5b049050611255816040518060600160405280602681526020016129af602691396001600160a01b038516600090815260046020526040902054919063ffffffff611c5a16565b6001600160a01b038316600090815260046020908152604080832093909355600f9052205415611328576001600160a01b0382166000908152600f60205260409020548610156112e4576001600160a01b038083166000818152600e60209081526040808320549094168252600d815283822080548b90039055918152600f9091522080548790039055611328565b6001600160a01b038083166000818152600f602081815260408084208054600e8452828620549097168552600d835290842080549690960390955592825290915290555b6001600160a01b0382166000908152600c6020526040902054156113ef576001600160a01b0382166000908152600c60205260409020548610156113ab576001600160a01b038083166000818152600b60209081526040808320549094168252600a815283822080548b90039055918152600c90915220805487900390556113ef565b6001600160a01b038083166000818152600c602081815260408084208054600b8452828620549097168552600a835290842080549690960390955592825290915290555b60065461140690620186a09061ffff168302610971565b6008546001600160a01b031660009081526004602052604090205560065461144290620186a09061ffff16620184ac0362ffffff1683026109d2565b61144d60c8826109d2565b60006001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611491919061293b565b60405180910390a350600195945050505050565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156106d55780601f106106aa576101008083540402835291602001916106d5565b6009546001600160a01b031681565b600061070561151f611b77565b84610ac5856040518060600160405280602581526020016129fd6025913960056000611549611b77565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff611c5a16565b600082518451148015611594575081518351145b61159d57600080fd5b60005b8451811015610aca576115d98582815181106115b857fe5b60200260200101518583815181106115cc57fe5b602002602001015161166f565b6115e257600080fd5b8381815181106115ee57fe5b602002602001015185828151811061160257fe5b60200260200101516001600160a01b0316336001600160a01b03167f19872106a7b684d5d23cb3a2576a0913956657fc74879f0c213c43c6facaf9d186858151811061164a57fe5b602002602001015160405161165f91906124ff565b60405180910390a46001016115a0565b600061070561167c611b77565b8484611cbd565b6001600160a01b0382166000908152601e6020526040812054828114156116ae576000915050610709565b8083116116cd5760405162461bcd60e51b8152600401610764906126db565b601c548311156116ef5760405162461bcd60e51b815260040161076490612753565b6001600160a01b038416600090815260046020818152604080842054838604808652601d90935293205492945090850491600380871692919082169086905b85841015611786575b6004831015611766576305f5e10061174f8285611f9c565b89028161175857fe5b049750600190920191611737565b5060019092016000818152601d602052604081205491939092509061172e565b848310156117b4576305f5e1006117a38285806001019650611f9c565b8902816117ac57fe5b049750611786565b6117c4888363ffffffff611e8d16565b9a9950505050505050505050565b601d6020526000908152604090205481565b6000336117f381601c54611a0b565b336000818152600f6020908152604080832054600e8352818420546001600160a01b03168452600d90925290912080549190910390556118329061107a565b6001600160a01b0384166000818152600d60209081526040808320805490950190945533808352600e90915292902080546001600160a01b031916909117905561187b9061107a565b336000908152600f602052604090205550600192915050565b601e6020526000908152604090205481565b600a6020526000908152604090205481565b60125481565b601b6020526000908152604090205460ff1681565b60006064600054603302816118e457fe5b6001600160a01b0384166000908152600a60205260409020549190041061191d5760405162461bcd60e51b8152600401610764906128df565b33321461193c5760405162461bcd60e51b815260040161076490612897565b600880546001600160a01b0319166001600160a01b0384169081179091556040517fafa147634b29e2c7bd53ce194256b9f41cfb9ba3036f2b822fdd1d965beea08690600090a2506001919050565b60196020526000908152604090205481565b600f6020526000908152604090205481565b60146020526000908152604090205481565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b60065461ffff1681565b60105481565b6008546001600160a01b031681565b6001600160a01b0382166000908152601e602052604090205481811415611a325750611b61565b808211611a515760405162461bcd60e51b8152600401610764906126db565b601c54821115611a735760405162461bcd60e51b815260040161076490612753565b6001600160a01b038316600090815260046020818152604080842054838604808652601d9093529320549185049260038087169390831691905b85841015611b05575b6004831015611ae5576305f5e100611ace8285611f9c565b830281611ad757fe5b600190940193049150611ab6565b5060019092016000818152601d6020526040812054919390925090611aad565b84831015611b33576305f5e100611b228285806001019650611f9c565b830281611b2b57fe5b049150611b05565b506001600160a01b038816600090815260046020908152604080832093909355601e90522086905550505050505b5050565b600d6020526000908152604090205481565b3390565b82611b8881601c54611a0b565b82611b9581601c54611a0b565b6001600160a01b038516611bbb5760405162461bcd60e51b81526004016107649061282f565b6001600160a01b038416611be15760405162461bcd60e51b8152600401610764906125dc565b6001600160a01b0380861660008181526005602090815260408083209489168084529490915290819020869055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611c3c90879061293b565b60405180910390a35050505050565b611c5781601c54611a0b565b50565b60008184841115611c7e5760405162461bcd60e51b815260040161076491906124ff565b505050900390565b600082820183811015611cab5760405162461bcd60e51b81526004016107649061266d565b9392505050565b600780549091019055565b611cc683611c4b565b611ccf82611c4b565b600854611ce4906001600160a01b0316611c4b565b6001600160a01b038316611d0a5760405162461bcd60e51b8152600401610764906127ea565b6001600160a01b038216611d305760405162461bcd60e51b815260040161076490612552565b6000611d3b82611fa6565b9050611d80816040518060600160405280602681526020016129af602691396001600160a01b038716600090815260046020526040902054919063ffffffff611c5a16565b6001600160a01b038516600090815260046020526040902055600654611ddc90620186a09061ffff16620184ac0362ffffff1683026001600160a01b03861660009081526004602052604090205491900463ffffffff611c8616565b6001600160a01b038416600090815260046020526040902055611dff8483611fd5565b600654611e1690620186a09061ffff168302610971565b6008546001600160a01b0316600090815260046020526040902055611e3c60c8826109d2565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e7f919061293b565b60405180910390a350505050565b6000611cab83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611c5a565b600082611ede57506000610709565b82820282848281611eeb57fe5b0414611cab5760405162461bcd60e51b815260040161076490612712565b6000611cab83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612163565b6003919091036040021b1790565b6009546001600160a01b03163314611f835760405162461bcd60e51b815260040161076490612873565b600054611f96908263ffffffff611c8616565b60005550565b6040021b60c01c90565b6000610709600054610c8c611fc8600754600054611e8d90919063ffffffff16565b859063ffffffff611ecf16565b6001600160a01b0382166000908152600f60205260409020541561209a576001600160a01b038083166000908152600e6020908152604080832054600f9092529091205491169082101561205c576001600160a01b038082166000908152600d60209081526040808320805487900390559286168252600f90522080548390039055612098565b6001600160a01b038084166000818152600f6020818152604080842080549688168552600d835290842080549690960390955592825290915290555b505b6001600160a01b0382166000908152600c602052604090205415611b61576001600160a01b0382166000908152600c602052604090205481101561211d576001600160a01b038083166000818152600b60209081526040808320549094168252600a815283822080548690039055918152600c9091522080548290039055611b61565b506001600160a01b039081166000818152600c602081815260408084208054600b8452828620549097168552600a83529084208054969096039095559282529091529055565b600081836121845760405162461bcd60e51b815260040161076491906124ff565b50600083858161219057fe5b0495945050505050565b80356001600160a01b038116811461070957600080fd5b6000601f83818401126121c2578182fd5b82356121d56121d082612979565b612952565b818152925060208084019085810160005b84811015612268578135880189603f82011261220157600080fd5b8381013567ffffffffffffffff81111561221a57600080fd5b61222b818901601f19168601612952565b81815260408c8184860101111561224157600080fd5b828185018884013750600091810186019190915285525092820192908201906001016121e6565b50505050505092915050565b600082601f830112612284578081fd5b81356122926121d082612979565b8181529150602080830190848101818402860182018710156122b357600080fd5b60005b848110156122d2578135845292820192908201906001016122b6565b505050505092915050565b6000602082840312156122ee578081fd5b611cab838361219a565b6000806040838503121561230a578081fd5b612314848461219a565b9150612323846020850161219a565b90509250929050565b600080600060608486031215612340578081fd5b833561234b81612999565b9250602084013561235b81612999565b929592945050506040919091013590565b6000806040838503121561237e578182fd5b612388848461219a565b946020939093013593505050565b6000806000606084860312156123aa578283fd5b833567ffffffffffffffff808211156123c1578485fd5b81860187601f8201126123d2578586fd5b803592506123e26121d084612979565b80848252602080830192508084018b82838902870101111561240257898afd5b8994505b8685101561242c576124188c8261219a565b845260019490940193928101928101612406565b509097508801359350505080821115612443578384fd5b61244f87838801612274565b93506040860135915080821115612464578283fd5b50612471868287016121b1565b9150509250925092565b60006020828403121561248c578081fd5b5035919050565b600080600080600060a086880312156124aa578081fd5b85359450602086013561ffff811681146124c2578182fd5b94979496505050506040830135926060810135926080909101359150565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b8181101561252b5785810183015185820160400152820161250f565b8181111561253c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526027908201527f7365744e657766656444616f207265717569726573206d616a6f7269747920616040820152661c1c1c9bdd985b60ca1b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602f908201527f4572726f723a2044697362757273616c20706f696e747320646f206e6f74206660408201526e34ba1034b71030903ab4b73a1b1a1760891b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601c908201527f7472616e736665722066726f6d206e6f6e666564206164647265737300000000604082015260600190565b6020808252601a908201527f4469766964656e647320616c726561647920636c61696d65642e000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526035908201527f43616e206e6f7420636c61696d206469766964656e647320746861742068617660408201527432903737ba103132b2b7103234b9b13ab939b2b21760591b606082015260800190565b60208082526022908201527f7365744e657766656444616f207265717569726573206e6f6e20636f6e74726160408201526118dd60f21b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252600a90820152696e6f742066656444414f60b01b604082015260600190565b60208082526028908201527f5370726f75743a207365744e65775444616f207265717569726573206e6f6e2060408201526718dbdb9d1c9858dd60c21b606082015260800190565b6020808252602d908201527f5370726f75743a207365744e65775444616f207265717569726573206d616a6f60408201526c1c9a5d1e48185c1c1c9bdd985b609a1b606082015260800190565b61ffff91909116815260200190565b90815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561297157600080fd5b604052919050565b600067ffffffffffffffff82111561298f578081fd5b5060209081020190565b6001600160a01b0381168114611c5757600080fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122084be3121f7dd72346a982e31d58ada418accb3fead2a3d4cc236f8f366ae834764736f6c63430006080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063897615e611610182578063d098948c116100e9578063dd467064116100a2578063e24bea031161007c578063e24bea0314610602578063f4289aba1461060a578063fd53585d14610612578063ff77bccb14610625576102bb565b8063dd467064146105d4578063dd62ed3e146105e7578063ddca3f43146105fa576102bb565b8063d098948c1461056d578063d37118d714610580578063d3ecebd714610588578063d5a40fd51461059b578063d5cdac51146105ae578063d7324077146105c1576102bb565b8063a60573701161013b578063a6057370146104fb578063a9059cbb1461050e578063a9ed12b114610521578063abfbc06b14610534578063ae17060e14610547578063c61f1e4b1461055a576102bb565b8063897615e61461049f5780638d7e22e2146104b25780638e089173146104c557806395d89b41146104d857806396a5dd6a146104e0578063a457c2d7146104e8576102bb565b806339509351116102265780636c7bd1d7116101df5780636c7bd1d71461042d5780636e393ac2146104405780636ebcf6071461045357806370a082311461046657806378db0c1414610479578063874282631461048c576102bb565b806339509351146103cf57806343d37cb0146103e25780634479700a146103ea5780634d9c6e27146103f257806355d0a1d0146104125780635a0b2c151461041a576102bb565b806323b872dd1161027857806323b872dd1461034c578063265cf3e21461035f578063306c67111461037457806330b49d2f14610387578063313ce567146103a7578063346b1d17146103bc576102bb565b806306f92426146102c057806306fdde03146102e957806308cd2369146102fe578063095ea7b31461031157806318160ddd14610331578063193192f214610339575b600080fd5b6102d36102ce36600461247b565b610638565b6040516102e0919061293b565b60405180910390f35b6102f161064a565b6040516102e091906124ff565b6102d361030c3660046122dd565b6106df565b61032461031f36600461236c565b6106f1565b6040516102e091906124f4565b6102d361070f565b61032461034736600461236c565b610715565b61032461035a36600461232c565b610a3a565b61037261036d366004612493565b610ad5565b005b6103246103823660046122dd565b610b80565b61039a6103953660046122dd565b610c38565b6040516102e091906124e0565b6103af610c53565b6040516102e09190612944565b6103726103ca36600461247b565b610c5c565b6103246103dd36600461236c565b610d54565b6102d3610da8565b6102d3610dae565b61040561040036600461247b565b610db4565b6040516102e0919061292c565b6102d3610dca565b61039a6104283660046122dd565b610dd0565b61037261043b36600461247b565b610deb565b6102d361044e36600461247b565b611056565b6102d36104613660046122dd565b611068565b6102d36104743660046122dd565b61107a565b61032461048736600461247b565b6110c0565b6102d361049a36600461247b565b6110d5565b61039a6104ad36600461247b565b6110e7565b6103246104c03660046122dd565b611102565b6103246104d336600461247b565b6111b2565b6102f16114a5565b61039a611503565b6103246104f636600461236c565b611512565b610324610509366004612396565b611580565b61032461051c36600461236c565b61166f565b6102d361052f36600461236c565b611683565b6102d361054236600461247b565b6117d2565b6103246105553660046122dd565b6117e4565b6102d36105683660046122dd565b611894565b6102d361057b3660046122dd565b6118a6565b6102d36118b8565b61032461059636600461247b565b6118be565b6103246105a93660046122dd565b6118d3565b6102d36105bc36600461247b565b61198b565b6102d36105cf3660046122dd565b61199d565b6102d36105e236600461247b565b6119af565b6102d36105f53660046122f8565b6119c1565b6104056119ec565b6102d36119f6565b61039a6119fc565b61037261062036600461236c565b611a0b565b6102d36106333660046122dd565b611b65565b60156020526000908152604090205481565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d55780601f106106aa576101008083540402835291602001916106d5565b820191906000526020600020905b8154815290600101906020018083116106b857829003601f168201915b5050505050905090565b600c6020526000908152604090205481565b60006107056106fe611b77565b8484611b7b565b5060015b92915050565b60005490565b600061072083611c4b565b600854610735906001600160a01b0316611c4b565b60095483906000906001600160a01b0316331461076d5760405162461bcd60e51b8152600401610764906126a4565b60405180910390fd5b600054600754810385028161077e57fe5b0490506107c4816040518060600160405280602681526020016129af602691396001600160a01b038516600090815260046020526040902054919063ffffffff611c5a16565b6001600160a01b038316600090815260046020908152604080832093909355600f9052205415610897576001600160a01b0382166000908152600f6020526040902054841015610853576001600160a01b038083166000818152600e60209081526040808320549094168252600d815283822080548990039055918152600f9091522080548590039055610897565b6001600160a01b038083166000818152600f602081815260408084208054600e8452828620549097168552600d835290842080549690960390955592825290915290555b6001600160a01b0382166000908152600c60205260409020541561095e576001600160a01b0382166000908152600c602052604090205484101561091a576001600160a01b038083166000818152600b60209081526040808320549094168252600a815283822080548990039055918152600c909152208054859003905561095e565b6001600160a01b038083166000818152600c602081815260408084208054600b8452828620549097168552600a835290842080549690960390955592825290915290555b60065461099a90620186a09061ffff1683025b6008546001600160a01b031660009081526004602052604090205491900463ffffffff611c8616565b6008546001600160a01b03166000908152600460205260409020556006546109d890620186a09061ffff16620184ac0362ffffff1683025b04611cb2565b6109e360c8826109d2565b60006001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a27919061293b565b60405180910390a3506001949350505050565b600083610a4981601c54611a0b565b610a54858585611cbd565b610aca85610a60611b77565b610ac5866040518060600160405280602881526020016129d5602891396001600160a01b038b16600090815260056020526040812090610a9e611b77565b6001600160a01b03168152602081019190915260400160002054919063ffffffff611c5a16565b611b7b565b506001949350505050565b6010805460010190819055600081815260136020908152604080832080546001600160a01b031916331790556011546014835281842042909101905560168252808320805461ffff8a1661ffff1990911617905560158252808320899055601782528083208790556018825280832086905560199091528082208490555182917fc9953cb0a36aafd57ba1d0521aec9bdb4c87749a4130234f1ec367535441399491a2505050505050565b6000606460005460330281610b9157fe5b6001600160a01b0384166000908152600d602052604090205491900410610bca5760405162461bcd60e51b815260040161076490612595565b333214610be95760405162461bcd60e51b8152600401610764906127a8565b600980546001600160a01b0319166001600160a01b0384169081179091556040517f643c9b43c7ed05e8c7689242644be54618a6067fc15e66a30505b648f69cef6b90600090a2506001919050565b600b602052600090815260409020546001600160a01b031681565b60035460ff1690565b6000610c98610c78600754600054611e8d90919063ffffffff16565b610c8c846305f5e10063ffffffff611ecf16565b9063ffffffff611f0916565b905067ffffffffffffffff8110610cc15760405162461bcd60e51b81526004016107649061261e565b601c5460048104600380831690811415610cdc575060010160005b6000828152601d6020526040902054610cf6818387611f4b565b6000848152601d602052604090205560018401601c55610d1586611f59565b7f4b8c67e7613d36e16f35d53233370f831f317c4a5f5a51a13ad81e4f93343d6e86604051610d44919061293b565b60405180910390a1505050505050565b6000610705610d61611b77565b84610ac58560056000610d72611b77565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff611c8616565b60115481565b601c5481565b60166020526000908152604090205461ffff1681565b60075481565b600e602052600090815260409020546001600160a01b031681565b600854601c546001600160a01b0390911690610e08908290611a0b565b6000828152601460205260409020544210801590610e39575060125460008381526014602052604090205442910110155b610e4257600080fd5b6000828152601b602052604090205460ff1615610e5e57600080fd5b6009546001600160a01b03163314610e7557600080fd5b6000828152601360205260409020546001600160a01b03163314610e9857600080fd5b60008281526015602052604090205415610f1857600082815260156020526040902054610ec490611f59565b6000828152601560209081526040808320546008546001600160a01b03168452600490925290912054610efc9163ffffffff611c8616565b6008546001600160a01b03166000908152600460205260409020555b60008281526016602052604090205461ffff1661270f14801590610f50575060008281526016602052604090205461ffff166109c410155b15610f7a576000828152601660205260409020546006805461ffff191661ffff9092169190911790555b60008281526017602052604090205415610fa657600082815260176020526040902054610fa690610c5c565b60008281526018602052604090205415610feb576000828152601860205260409020546203f4801115610fd857600080fd5b6000828152601860205260409020546011555b60008281526019602052604090205415611012576000828152601960205260409020546012555b6000828152601b6020526040808220805460ff191660011790555183917f25e590a02eeb0e1d9aada3d581d18076f2ce6ba24263d46b11f96c76e06974e891a25050565b60186020526000908152604090205481565b60046020526000908152604090205481565b6000610709611096600754600054611e8d90919063ffffffff16565b600080546001600160a01b03861682526004602052604090912054610c8c9163ffffffff611ecf16565b601a6020526000908152604090205460ff1681565b60176020526000908152604090205481565b6013602052600090815260409020546001600160a01b031681565b60003361111181601c54611a0b565b336000818152600c6020908152604080832054600b8352818420546001600160a01b03168452600a90925290912080549190910390556111509061107a565b6001600160a01b0384166000818152600a60209081526040808320805490950190945533808352600b90915292902080546001600160a01b03191690911790556111999061107a565b336000908152600c602052604090205550600192915050565b6000336111c181601c54611a0b565b600854601c546001600160a01b03909116906111de908290611a0b565b336000816111fe5760405162461bcd60e51b8152600401610764906127ea565b600054600754810387028161120f57fe5b049050611255816040518060600160405280602681526020016129af602691396001600160a01b038516600090815260046020526040902054919063ffffffff611c5a16565b6001600160a01b038316600090815260046020908152604080832093909355600f9052205415611328576001600160a01b0382166000908152600f60205260409020548610156112e4576001600160a01b038083166000818152600e60209081526040808320549094168252600d815283822080548b90039055918152600f9091522080548790039055611328565b6001600160a01b038083166000818152600f602081815260408084208054600e8452828620549097168552600d835290842080549690960390955592825290915290555b6001600160a01b0382166000908152600c6020526040902054156113ef576001600160a01b0382166000908152600c60205260409020548610156113ab576001600160a01b038083166000818152600b60209081526040808320549094168252600a815283822080548b90039055918152600c90915220805487900390556113ef565b6001600160a01b038083166000818152600c602081815260408084208054600b8452828620549097168552600a835290842080549690960390955592825290915290555b60065461140690620186a09061ffff168302610971565b6008546001600160a01b031660009081526004602052604090205560065461144290620186a09061ffff16620184ac0362ffffff1683026109d2565b61144d60c8826109d2565b60006001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611491919061293b565b60405180910390a350600195945050505050565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156106d55780601f106106aa576101008083540402835291602001916106d5565b6009546001600160a01b031681565b600061070561151f611b77565b84610ac5856040518060600160405280602581526020016129fd6025913960056000611549611b77565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff611c5a16565b600082518451148015611594575081518351145b61159d57600080fd5b60005b8451811015610aca576115d98582815181106115b857fe5b60200260200101518583815181106115cc57fe5b602002602001015161166f565b6115e257600080fd5b8381815181106115ee57fe5b602002602001015185828151811061160257fe5b60200260200101516001600160a01b0316336001600160a01b03167f19872106a7b684d5d23cb3a2576a0913956657fc74879f0c213c43c6facaf9d186858151811061164a57fe5b602002602001015160405161165f91906124ff565b60405180910390a46001016115a0565b600061070561167c611b77565b8484611cbd565b6001600160a01b0382166000908152601e6020526040812054828114156116ae576000915050610709565b8083116116cd5760405162461bcd60e51b8152600401610764906126db565b601c548311156116ef5760405162461bcd60e51b815260040161076490612753565b6001600160a01b038416600090815260046020818152604080842054838604808652601d90935293205492945090850491600380871692919082169086905b85841015611786575b6004831015611766576305f5e10061174f8285611f9c565b89028161175857fe5b049750600190920191611737565b5060019092016000818152601d602052604081205491939092509061172e565b848310156117b4576305f5e1006117a38285806001019650611f9c565b8902816117ac57fe5b049750611786565b6117c4888363ffffffff611e8d16565b9a9950505050505050505050565b601d6020526000908152604090205481565b6000336117f381601c54611a0b565b336000818152600f6020908152604080832054600e8352818420546001600160a01b03168452600d90925290912080549190910390556118329061107a565b6001600160a01b0384166000818152600d60209081526040808320805490950190945533808352600e90915292902080546001600160a01b031916909117905561187b9061107a565b336000908152600f602052604090205550600192915050565b601e6020526000908152604090205481565b600a6020526000908152604090205481565b60125481565b601b6020526000908152604090205460ff1681565b60006064600054603302816118e457fe5b6001600160a01b0384166000908152600a60205260409020549190041061191d5760405162461bcd60e51b8152600401610764906128df565b33321461193c5760405162461bcd60e51b815260040161076490612897565b600880546001600160a01b0319166001600160a01b0384169081179091556040517fafa147634b29e2c7bd53ce194256b9f41cfb9ba3036f2b822fdd1d965beea08690600090a2506001919050565b60196020526000908152604090205481565b600f6020526000908152604090205481565b60146020526000908152604090205481565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b60065461ffff1681565b60105481565b6008546001600160a01b031681565b6001600160a01b0382166000908152601e602052604090205481811415611a325750611b61565b808211611a515760405162461bcd60e51b8152600401610764906126db565b601c54821115611a735760405162461bcd60e51b815260040161076490612753565b6001600160a01b038316600090815260046020818152604080842054838604808652601d9093529320549185049260038087169390831691905b85841015611b05575b6004831015611ae5576305f5e100611ace8285611f9c565b830281611ad757fe5b600190940193049150611ab6565b5060019092016000818152601d6020526040812054919390925090611aad565b84831015611b33576305f5e100611b228285806001019650611f9c565b830281611b2b57fe5b049150611b05565b506001600160a01b038816600090815260046020908152604080832093909355601e90522086905550505050505b5050565b600d6020526000908152604090205481565b3390565b82611b8881601c54611a0b565b82611b9581601c54611a0b565b6001600160a01b038516611bbb5760405162461bcd60e51b81526004016107649061282f565b6001600160a01b038416611be15760405162461bcd60e51b8152600401610764906125dc565b6001600160a01b0380861660008181526005602090815260408083209489168084529490915290819020869055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611c3c90879061293b565b60405180910390a35050505050565b611c5781601c54611a0b565b50565b60008184841115611c7e5760405162461bcd60e51b815260040161076491906124ff565b505050900390565b600082820183811015611cab5760405162461bcd60e51b81526004016107649061266d565b9392505050565b600780549091019055565b611cc683611c4b565b611ccf82611c4b565b600854611ce4906001600160a01b0316611c4b565b6001600160a01b038316611d0a5760405162461bcd60e51b8152600401610764906127ea565b6001600160a01b038216611d305760405162461bcd60e51b815260040161076490612552565b6000611d3b82611fa6565b9050611d80816040518060600160405280602681526020016129af602691396001600160a01b038716600090815260046020526040902054919063ffffffff611c5a16565b6001600160a01b038516600090815260046020526040902055600654611ddc90620186a09061ffff16620184ac0362ffffff1683026001600160a01b03861660009081526004602052604090205491900463ffffffff611c8616565b6001600160a01b038416600090815260046020526040902055611dff8483611fd5565b600654611e1690620186a09061ffff168302610971565b6008546001600160a01b0316600090815260046020526040902055611e3c60c8826109d2565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e7f919061293b565b60405180910390a350505050565b6000611cab83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611c5a565b600082611ede57506000610709565b82820282848281611eeb57fe5b0414611cab5760405162461bcd60e51b815260040161076490612712565b6000611cab83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612163565b6003919091036040021b1790565b6009546001600160a01b03163314611f835760405162461bcd60e51b815260040161076490612873565b600054611f96908263ffffffff611c8616565b60005550565b6040021b60c01c90565b6000610709600054610c8c611fc8600754600054611e8d90919063ffffffff16565b859063ffffffff611ecf16565b6001600160a01b0382166000908152600f60205260409020541561209a576001600160a01b038083166000908152600e6020908152604080832054600f9092529091205491169082101561205c576001600160a01b038082166000908152600d60209081526040808320805487900390559286168252600f90522080548390039055612098565b6001600160a01b038084166000818152600f6020818152604080842080549688168552600d835290842080549690960390955592825290915290555b505b6001600160a01b0382166000908152600c602052604090205415611b61576001600160a01b0382166000908152600c602052604090205481101561211d576001600160a01b038083166000818152600b60209081526040808320549094168252600a815283822080548690039055918152600c9091522080548290039055611b61565b506001600160a01b039081166000818152600c602081815260408084208054600b8452828620549097168552600a83529084208054969096039095559282529091529055565b600081836121845760405162461bcd60e51b815260040161076491906124ff565b50600083858161219057fe5b0495945050505050565b80356001600160a01b038116811461070957600080fd5b6000601f83818401126121c2578182fd5b82356121d56121d082612979565b612952565b818152925060208084019085810160005b84811015612268578135880189603f82011261220157600080fd5b8381013567ffffffffffffffff81111561221a57600080fd5b61222b818901601f19168601612952565b81815260408c8184860101111561224157600080fd5b828185018884013750600091810186019190915285525092820192908201906001016121e6565b50505050505092915050565b600082601f830112612284578081fd5b81356122926121d082612979565b8181529150602080830190848101818402860182018710156122b357600080fd5b60005b848110156122d2578135845292820192908201906001016122b6565b505050505092915050565b6000602082840312156122ee578081fd5b611cab838361219a565b6000806040838503121561230a578081fd5b612314848461219a565b9150612323846020850161219a565b90509250929050565b600080600060608486031215612340578081fd5b833561234b81612999565b9250602084013561235b81612999565b929592945050506040919091013590565b6000806040838503121561237e578182fd5b612388848461219a565b946020939093013593505050565b6000806000606084860312156123aa578283fd5b833567ffffffffffffffff808211156123c1578485fd5b81860187601f8201126123d2578586fd5b803592506123e26121d084612979565b80848252602080830192508084018b82838902870101111561240257898afd5b8994505b8685101561242c576124188c8261219a565b845260019490940193928101928101612406565b509097508801359350505080821115612443578384fd5b61244f87838801612274565b93506040860135915080821115612464578283fd5b50612471868287016121b1565b9150509250925092565b60006020828403121561248c578081fd5b5035919050565b600080600080600060a086880312156124aa578081fd5b85359450602086013561ffff811681146124c2578182fd5b94979496505050506040830135926060810135926080909101359150565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b8181101561252b5785810183015185820160400152820161250f565b8181111561253c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526027908201527f7365744e657766656444616f207265717569726573206d616a6f7269747920616040820152661c1c1c9bdd985b60ca1b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602f908201527f4572726f723a2044697362757273616c20706f696e747320646f206e6f74206660408201526e34ba1034b71030903ab4b73a1b1a1760891b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601c908201527f7472616e736665722066726f6d206e6f6e666564206164647265737300000000604082015260600190565b6020808252601a908201527f4469766964656e647320616c726561647920636c61696d65642e000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526035908201527f43616e206e6f7420636c61696d206469766964656e647320746861742068617660408201527432903737ba103132b2b7103234b9b13ab939b2b21760591b606082015260800190565b60208082526022908201527f7365744e657766656444616f207265717569726573206e6f6e20636f6e74726160408201526118dd60f21b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252600a90820152696e6f742066656444414f60b01b604082015260600190565b60208082526028908201527f5370726f75743a207365744e65775444616f207265717569726573206e6f6e2060408201526718dbdb9d1c9858dd60c21b606082015260800190565b6020808252602d908201527f5370726f75743a207365744e65775444616f207265717569726573206d616a6f60408201526c1c9a5d1e48185c1c1c9bdd985b609a1b606082015260800190565b61ffff91909116815260200190565b90815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561297157600080fd5b604052919050565b600067ffffffffffffffff82111561298f578081fd5b5060209081020190565b6001600160a01b0381168114611c5757600080fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122084be3121f7dd72346a982e31d58ada418accb3fead2a3d4cc236f8f366ae834764736f6c63430006080033",
  "devdoc": {
    "details": "Implementation of the {IERC20} interface. * This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. * TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. * We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. * Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. * Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burnfed(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, reducing the total supply.     * Emits a {Transfer} event with `to` set to the zero address.     * Requirements:     * - `account` cannot be the zero address. - `account` must have at least `amount` tokens."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 8.     * To select a different value for {decimals}, use {_setupDecimals}.     * All three of these values are immutable: they can only be set once during construction."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "newproposal(uint256,uint16,uint256,uint256,uint256)": {
        "details": "Moves tokens `amount` from `sender` to `recipient`.     * This is internal function is equivalent to {transfer}, and can be used to e.g. implement automatic token fees, slashing mechanisms, etc.     * Emits a {Transfer} event.     * Requirements:     * - `sender` cannot be the zero address. - `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}.     * Requirements:     * - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "updatefedVote(address)": {
        "details": "Update votes. Votedad voted address by sender. Votet treasury address votes.     Voted sender vote amount."
      },
      "updatetreasuryVote(address)": {
        "details": "Update votes. Votedad voted address by sender. Votet treasury address votes.     Voted sender vote amount."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 315,
        "contract": "contracts/Muny.sol:Muny",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 317,
        "contract": "contracts/Muny.sol:Muny",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 319,
        "contract": "contracts/Muny.sol:Muny",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Muny.sol:Muny",
        "label": "_decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 325,
        "contract": "contracts/Muny.sol:Muny",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 331,
        "contract": "contracts/Muny.sol:Muny",
        "label": "_allowances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 333,
        "contract": "contracts/Muny.sol:Muny",
        "label": "fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 335,
        "contract": "contracts/Muny.sol:Muny",
        "label": "burnedSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 337,
        "contract": "contracts/Muny.sol:Muny",
        "label": "treasuryDao",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 339,
        "contract": "contracts/Muny.sol:Muny",
        "label": "fedDAO",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 343,
        "contract": "contracts/Muny.sol:Muny",
        "label": "tvote",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 347,
        "contract": "contracts/Muny.sol:Muny",
        "label": "tvotedaddrs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 351,
        "contract": "contracts/Muny.sol:Muny",
        "label": "tvoted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 355,
        "contract": "contracts/Muny.sol:Muny",
        "label": "fvote",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 359,
        "contract": "contracts/Muny.sol:Muny",
        "label": "fvotedaddrs",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 363,
        "contract": "contracts/Muny.sol:Muny",
        "label": "fvoted",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 365,
        "contract": "contracts/Muny.sol:Muny",
        "label": "prop",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 367,
        "contract": "contracts/Muny.sol:Muny",
        "label": "tlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 369,
        "contract": "contracts/Muny.sol:Muny",
        "label": "lockxp",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 373,
        "contract": "contracts/Muny.sol:Muny",
        "label": "proposer",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 377,
        "contract": "contracts/Muny.sol:Muny",
        "label": "lock",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 381,
        "contract": "contracts/Muny.sol:Muny",
        "label": "mintam",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 385,
        "contract": "contracts/Muny.sol:Muny",
        "label": "pfee",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint16)"
      },
      {
        "astId": 389,
        "contract": "contracts/Muny.sol:Muny",
        "label": "inflate",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 393,
        "contract": "contracts/Muny.sol:Muny",
        "label": "lockmin",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 397,
        "contract": "contracts/Muny.sol:Muny",
        "label": "lockx",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 401,
        "contract": "contracts/Muny.sol:Muny",
        "label": "canceled",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 405,
        "contract": "contracts/Muny.sol:Muny",
        "label": "executed",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 506,
        "contract": "contracts/Muny.sol:Muny",
        "label": "totalDisbursals",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 510,
        "contract": "contracts/Muny.sol:Muny",
        "label": "packedDisbursals",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 514,
        "contract": "contracts/Muny.sol:Muny",
        "label": "lastDisbursalIndex",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "2167800",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "DividendsOwedUntil(address,uint256)": "infinite",
      "_balances(address)": "1346",
      "_disburse(uint256)": "infinite",
      "allowance(address,address)": "infinite",
      "approve(address,uint256)": "infinite",
      "balanceOf(address)": "infinite",
      "burnedSupply()": "1162",
      "burnfed(address,uint256)": "infinite",
      "burnt(uint256)": "infinite",
      "canceled(uint256)": "1316",
      "claimDividendsOwedUntil(address,uint256)": "infinite",
      "decimals()": "1180",
      "decreaseAllowance(address,uint256)": "infinite",
      "executed(uint256)": "1272",
      "executeproposal(uint256)": "infinite",
      "fedDAO()": "1204",
      "fee()": "1157",
      "fvote(address)": "1389",
      "fvoted(address)": "1412",
      "fvotedaddrs(address)": "1455",
      "increaseAllowance(address,uint256)": "infinite",
      "inflate(uint256)": "1326",
      "lastDisbursalIndex(address)": "1412",
      "lock(uint256)": "1238",
      "lockmin(uint256)": "1238",
      "lockx(uint256)": "1304",
      "lockxp()": "1095",
      "mintam(uint256)": "1218",
      "name()": "infinite",
      "newproposal(uint256,uint16,uint256,uint256,uint256)": "165312",
      "packedDisbursals(uint256)": "1282",
      "pfee(uint256)": "1301",
      "prop()": "1094",
      "proposer(uint256)": "1259",
      "setNewTDao(address)": "24294",
      "setNewfedDao(address)": "24273",
      "symbol()": "infinite",
      "tlock()": "1096",
      "totalDisbursals()": "1118",
      "totalSupply()": "1163",
      "transfer(address,uint256)": "infinite",
      "transferFrom(address,address,uint256)": "infinite",
      "transferx(address[],uint256[],string[])": "infinite",
      "treasuryDao()": "1158",
      "tvote(address)": "1302",
      "tvoted(address)": "1348",
      "tvotedaddrs(address)": "1411",
      "updatefedVote(address)": "infinite",
      "updatetreasuryVote(address)": "infinite"
    },
    "internal": {
      "_abVal(uint256)": "infinite",
      "_approve(address,address,uint256)": "infinite",
      "_burn(uint256)": "20827",
      "_mint(uint256)": "infinite",
      "_transfer(address,address,uint256)": "infinite",
      "_updateDividends(address)": "infinite",
      "_updateVotes(address,uint256)": "89028",
      "readPoints(uint256,uint256)": "29",
      "writePoints(uint256,uint256,uint256)": "41"
    }
  }
}