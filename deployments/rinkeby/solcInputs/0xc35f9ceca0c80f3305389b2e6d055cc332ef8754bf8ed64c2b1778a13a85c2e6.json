{
  "language": "Solidity",
  "sources": {
    "contracts/Muny.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { Context } from \"@openzeppelin/contracts/GSN/Context.sol\";\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract Muny is Context, IERC20 {\n    using SafeMath for uint256;\n\n    uint256 internal constant _pointMultiplier = 10**8;\n\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint16 public fee;\n    uint256 public burnedSupply;\n    address public treasuryDao;\n    address public fedDAO;\n\n    uint256 internal _totalDividendPoints;\n    mapping(address => uint256) internal _lastDividendPoints;\n\n    mapping(address => uint256) public tvote;\n    mapping(address => address) public tvotedaddrs;\n    mapping(address => uint256) public tvoted;\n\n    mapping(address => uint256) public fvote;\n    mapping(address => address) public fvotedaddrs;\n    mapping(address => uint256) public fvoted;\n\n    uint256 public prop;\n    uint256 public tlock;\n    uint256 public lockxp;\n    mapping(uint256 => address) public proposer;\n    mapping(uint256 => uint256) public lock;\n    mapping(uint256 => uint256) public mintam;\n    mapping(uint256 => uint16) public pfee;\n    mapping(uint256 => uint256) public inflate;\n    mapping(uint256 => uint256) public lockmin;\n    mapping(uint256 => uint256) public lockx;\n    mapping(uint256 => bool) public canceled;\n    mapping(uint256 => bool) public executed;\n\n    event NewTreasury(address indexed treasuryad);\n    event NewFed(address indexed fedad);\n    event Newproposal(uint256 indexed prop);\n    event Proposalexecuted(uint256 indexed prop);\n    event DividendClaim(address indexed owner, uint256 amount);\n    event Disbursal(uint256 amount);\n    event Memo(address indexed from, address indexed to, uint256 indexed value, string memo);\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 8.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        address fed,\n        address treasury\n    ) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 8;\n        treasuryDao = treasury;\n        fedDAO = fed;\n        _totalSupply = 1000000000000000; // 10**7*10e8\n        _balances[msg.sender] = 1000000000000000;\n        emit Transfer(address(0), msg.sender, 1000000000000000);\n        tlock = 5 days;\n        fee = 500;\n    }\n\n    /* Dividends */\n    /**\n     * @dev Modifier to update the balance of an account with any dividends\n     * owed to it.\n     *\n     * Based on Nick Johnson's Dividend-Bearing Tokens article\n     * https://medium.com/weka/dividend-bearing-tokens-on-ethereum-42d01c710657\n     *\n     * Note: This MUST be applied to every function which can alter a user's balance,\n     * except where tokens are minted from the null address.\n     */\n    modifier updatesDividends(address account) {\n        uint256 totalPoints = _totalDividendPoints;\n        uint256 lastPoints = _lastDividendPoints[account];\n        if (lastPoints > 0) {\n            uint256 balance = _balances[account];\n            uint256 newPoints = totalPoints.sub(lastPoints);\n            uint256 dividendsOwed = balance.mul(newPoints).div(_pointMultiplier);\n            _balances[account] = balance.add(dividendsOwed);\n        }\n        _lastDividendPoints[account] = totalPoints;\n        _;\n    }\n\n    function dividendsOwed(address account) public view returns (uint256) {\n        uint256 newPoints = _totalDividendPoints.sub(_lastDividendPoints[account]);\n        return _balances[account].mul(newPoints).div(_pointMultiplier);\n    }\n\n    function _disburse(uint256 amount) public {\n        _totalDividendPoints = _totalDividendPoints.add(\n          amount.mul(_pointMultiplier).div(_totalSupply)\n        );\n        _mint(amount);\n        emit Disbursal(amount);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        uint256 balance = _balances[account];\n        uint256 owed = dividendsOwed(account);\n        return balance.add(owed).mul(_totalSupply).div(_totalSupply.sub(burnedSupply));\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        virtual\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n\n    function newproposal(\n        uint256 fnd,\n        uint16 fam,\n        uint256 mint,\n        uint256 lockmn,\n        uint256 lockxp_\n    ) public {\n        prop += 1;\n        uint256 proposal = prop;\n        proposer[proposal] = msg.sender;\n        lock[proposal] = now + tlock;\n        pfee[proposal] = fam;\n        mintam[proposal] = fnd;\n        inflate[proposal] = mint;\n        lockmin[proposal] = lockmn;\n        lockx[proposal] = lockxp_;\n        emit Newproposal(proposal);\n    }\n\n    function executeproposal(uint256 proposal) public {\n        require(\n            now >= lock[proposal] && lock[proposal] + lockxp >= now\n        );\n        require(executed[proposal] == false);\n        require(msg.sender == fedDAO);\n        require(msg.sender == proposer[proposal]);\n\n        if (mintam[proposal] != 0) {\n            _mint(mintam[proposal]);\n            _balances[treasuryDao] = _balances[treasuryDao].add(\n                mintam[proposal]\n            );\n        }\n\n        if (pfee[proposal] != 9999 && 2500 >= pfee[proposal]) {\n            fee = pfee[proposal];\n        }\n\n        if (inflate[proposal] != 0) {\n            _disburse(inflate[proposal]);\n        }\n\n        if (lockmin[proposal] != 0) {\n            require(lockmin[proposal] >= 3 days);\n            tlock = lockmin[proposal];\n        }\n        if (lockx[proposal] != 0) {\n            lockxp = lockx[proposal];\n        }\n\n        executed[proposal] = true;\n        emit Proposalexecuted(proposal);\n    }\n\n    function setNewTDao(address treasury) public returns (bool) {\n        require(\n            tvote[treasury] > uint256((_totalSupply * 51) / 100),\n            \"Sprout: setNewTDao requires majority approval\"\n        );\n        require(\n            msg.sender == tx.origin,\n            \"Sprout: setNewTDao requires non contract\"\n        );\n        treasuryDao = treasury;\n        emit NewTreasury(treasury);\n        return true;\n    }\n\n    /**\n     * @dev Update votes. Votedad voted address by sender. Votet treasury address votes.\n     *      Voted sender vote amount.\n     */\n    function updatetreasuryVote(address treasury) public returns (bool) {\n        tvote[tvotedaddrs[msg.sender]] -= tvoted[msg.sender];\n        tvote[treasury] += uint256(balanceOf(msg.sender));\n        tvotedaddrs[msg.sender] = treasury;\n        tvoted[msg.sender] = uint256(balanceOf(msg.sender));\n        return true;\n    }\n\n    function setNewfedDao(address fed) public returns (bool) {\n        require(\n            fvote[fed] > uint256((_totalSupply * 51) / 100),\n            \"setNewfedDao requires majority approval\"\n        );\n        require(msg.sender == tx.origin, \"setNewfedDao requires non contract\");\n        fedDAO = fed;\n        emit NewFed(fed);\n        return true;\n    }\n\n    /**\n     * @dev Update votes. Votedad voted address by sender. Votet treasury address votes.\n     *      Voted sender vote amount.\n     */\n    function updatefedVote(address fed) public returns (bool) {\n        fvote[fvotedaddrs[msg.sender]] -= fvoted[msg.sender];\n        fvote[fed] += uint256(balanceOf(msg.sender));\n        fvotedaddrs[msg.sender] = fed;\n        fvoted[msg.sender] = uint256(balanceOf(msg.sender));\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amountt\n    ) internal updatesDividends(sender) updatesDividends(recipient) {\n        uint256 amount;\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        amount = uint256(\n            (amountt * (_totalSupply - burnedSupply)) / _totalSupply\n        );\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(\n            uint256((amount * (99500 - fee)) / 100000)\n        );\n\n        if (fvoted[sender] > 0) {\n            if (fvoted[sender] > amountt) {\n                fvote[fvotedaddrs[sender]] =\n                    fvote[fvotedaddrs[sender]] -\n                    amountt;\n                fvoted[sender] = fvoted[sender] - amountt;\n            } else {\n                fvote[fvotedaddrs[sender]] -= fvoted[sender];\n                fvoted[sender] = 0;\n            }\n        }\n\n        if (tvoted[sender] > 0) {\n            if (tvoted[sender] > amountt) {\n                tvote[tvotedaddrs[sender]] =\n                    tvote[tvotedaddrs[sender]] -\n                    amountt;\n                tvoted[sender] = tvoted[sender] - amountt;\n            } else {\n                tvote[tvotedaddrs[sender]] -= tvoted[sender];\n                tvoted[sender] = 0;\n            }\n        }\n\n        _balances[treasuryDao] = _balances[treasuryDao].add(\n            uint256((amount * fee) / 100000)\n        );\n        _burn(uint256(amount / 200));\n        emit Transfer(sender, recipient, amountt);\n    }\n\n    function transferx(\n        address[] memory to,\n        uint256[] memory tokens,\n        string[] memory memo\n    ) public returns (bool success) {\n        require(to.length == tokens.length && tokens.length == memo.length);\n        for (uint256 i = 0; i < to.length; i++) {\n            require(transfer(to[i], tokens[i]));\n            emit Memo(msg.sender, to[i], tokens[i], memo[i]);\n        }\n        return true;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(uint256 amount) internal virtual {\n        require(msg.sender == fedDAO, \"not fedDAO\");\n        _totalSupply = _totalSupply.add(amount);\n        burnedSupply = burnedSupply.add(amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function burnfed(address target, uint256 amountt)\n        public\n        updatesDividends(target)\n        returns (bool success)\n    {\n        address sender = target;\n        uint256 amount;\n        require(msg.sender == fedDAO, \"transfer from nonfed address\");\n        amount = uint256(\n            (amountt * (_totalSupply - burnedSupply)) / _totalSupply\n        );\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        if (fvoted[sender] > 0) {\n            if (fvoted[sender] > amountt) {\n                fvote[fvotedaddrs[sender]] =\n                    fvote[fvotedaddrs[sender]] -\n                    amountt;\n                fvoted[sender] = fvoted[sender] - amountt;\n            } else {\n                fvote[fvotedaddrs[sender]] -= fvoted[sender];\n                fvoted[sender] = 0;\n            }\n        }\n\n        if (tvoted[sender] > 0) {\n            if (tvoted[sender] > amountt) {\n                tvote[tvotedaddrs[sender]] =\n                    tvote[tvotedaddrs[sender]] -\n                    amountt;\n                tvoted[sender] = tvoted[sender] - amountt;\n            } else {\n                tvote[tvotedaddrs[sender]] -= tvoted[sender];\n                tvoted[sender] = 0;\n            }\n        }\n\n        _balances[treasuryDao] = _balances[treasuryDao].add(\n            uint256((amount * fee) / 100000)\n        );\n        _burn(uint256((amount * (99500 - fee)) / 100000));\n        _burn(uint256(amount / 200));\n        emit Transfer(sender, address(0), amount);\n        return true;\n    }\n\n    function _burn(uint256 amount) internal {\n        burnedSupply = burnedSupply + amount;\n    }\n\n    function burnt(uint256 amountt)\n        public\n        updatesDividends(msg.sender)\n        returns (bool success)\n    {\n        address sender = msg.sender;\n        uint256 amount;\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        amount = uint256(\n            (amountt * (_totalSupply - burnedSupply)) / _totalSupply\n        );\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        if (fvoted[sender] > 0) {\n            if (fvoted[sender] > amountt) {\n                fvote[fvotedaddrs[sender]] =\n                    fvote[fvotedaddrs[sender]] -\n                    amountt;\n                fvoted[sender] = fvoted[sender] - amountt;\n            } else {\n                fvote[fvotedaddrs[sender]] -= fvoted[sender];\n                fvoted[sender] = 0;\n            }\n        }\n\n        if (tvoted[sender] > 0) {\n            if (tvoted[sender] > amountt) {\n                tvote[tvotedaddrs[sender]] =\n                    tvote[tvotedaddrs[sender]] -\n                    amountt;\n                tvoted[sender] = tvoted[sender] - amountt;\n            } else {\n                tvote[tvotedaddrs[sender]] -= tvoted[sender];\n                tvoted[sender] = 0;\n            }\n        }\n\n        _balances[treasuryDao] = _balances[treasuryDao].add(\n            uint256((amount * fee) / 100000)\n        );\n        _burn(uint256((amount * (99500 - fee)) / 100000));\n        _burn(uint256(amount / 200));\n        emit Transfer(sender, address(0), amount);\n        return true;\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual updatesDividends(owner) updatesDividends(spender) {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}